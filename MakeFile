# Variables
DC=docker compose
DOCKER_COMPOSE_FILE=docker-compose.yml
DB_USER=postgres
DB_PASS=postgres
DB_NAME=rbac_db

.PHONY: help up down ps logs clean restart status db-connect db-backup db-restore db-reset db-status

# Default target
.DEFAULT_GOAL := help

# Colors for terminal output
COLOR_RESET=\033[0m
COLOR_BOLD=\033[1m
COLOR_GREEN=\033[32m
COLOR_YELLOW=\033[33m
COLOR_RED=\033[31m

# Docker Compose Commands
up: ## Start the container services
	@echo "$(COLOR_GREEN)Starting services...$(COLOR_RESET)"
	@$(DC) -f $(DOCKER_COMPOSE_FILE) up -d
	@echo "$(COLOR_GREEN)Services started:$(COLOR_RESET)"
	@$(DC) ps
	@echo "\n$(COLOR_GREEN)Access pgAdmin at:$(COLOR_RESET) http://localhost:5050"
	@echo "$(COLOR_GREEN)Email:$(COLOR_RESET) admin@admin.com"
	@echo "$(COLOR_GREEN)Password:$(COLOR_RESET) admin"
	@echo "\n$(COLOR_GREEN)Database credentials:$(COLOR_RESET)"
	@echo "Username: $(DB_USER)"
	@echo "Password: $(DB_PASS)"
	@echo "Database: $(DB_NAME)"

down: ## Stop the container services
	@echo "$(COLOR_YELLOW)Stopping services...$(COLOR_RESET)"
	@$(DC) -f $(DOCKER_COMPOSE_FILE) down -v

ps: ## Show container service status
	@echo "$(COLOR_GREEN)Current services status:$(COLOR_RESET)"
	@$(DC) ps

logs: ## View logs from all container services
	@$(DC) -f $(DOCKER_COMPOSE_FILE) logs -f

clean: ## Remove all containers, volumes, and images
	@echo "$(COLOR_YELLOW)Cleaning up all resources...$(COLOR_RESET)"
	@$(DC) -f $(DOCKER_COMPOSE_FILE) down -v --remove-orphans
	@echo "$(COLOR_GREEN)Cleanup complete$(COLOR_RESET)"

restart: down up ## Restart all container services

status: ## Check the health of container services
	@echo "$(COLOR_GREEN)Checking service health...$(COLOR_RESET)"
	@$(DC) ps
	@echo "\nContainer Logs:"
	@$(DC) logs --tail=20

# Database specific commands
db-connect: ## Connect to PostgreSQL database
	@echo "$(COLOR_GREEN)Connecting to database...$(COLOR_RESET)"
	@docker exec -it postgres_rbac psql -U $(DB_USER) -d $(DB_NAME)

db-status: ## Show database status and list of tables
	@echo "$(COLOR_GREEN)Database Status:$(COLOR_RESET)"
	@docker exec postgres_rbac psql -U $(DB_USER) -d $(DB_NAME) -c "\l+ $(DB_NAME)"
	@echo "\n$(COLOR_GREEN)Tables in $(DB_NAME):$(COLOR_RESET)"
	@docker exec postgres_rbac psql -U $(DB_USER) -d $(DB_NAME) -c "\dt"

db-reset: ## Reset the database (clear all tables)
	@echo "$(COLOR_YELLOW)Resetting database...$(COLOR_RESET)"
	@docker exec postgres_rbac psql -U $(DB_USER) -d $(DB_NAME) -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
	@echo "$(COLOR_GREEN)Database has been reset$(COLOR_RESET)"

db-backup: ## Backup the database
	@echo "$(COLOR_GREEN)Creating database backup...$(COLOR_RESET)"
	@docker exec postgres_rbac pg_dump -U $(DB_USER) $(DB_NAME) > backup_$(shell date +%Y%m%d_%H%M%S).sql

db-restore: ## Restore the database (specify file with FILE=backup_file.sql)
	@if [ -z "$(FILE)" ]; then \
		echo "$(COLOR_YELLOW)Please specify the backup file with FILE=backup_file.sql$(COLOR_RESET)"; \
		exit 1; \
	fi
	@echo "$(COLOR_GREEN)Restoring database from $(FILE)...$(COLOR_RESET)"
	@docker exec -i postgres_rbac psql -U $(DB_USER) $(DB_NAME) < $(FILE)

# Help command
help: ## Show this help
	@echo "$(COLOR_BOLD)Available commands:$(COLOR_RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[32m%-15s\033[0m %s\n", $$1, $$2}'